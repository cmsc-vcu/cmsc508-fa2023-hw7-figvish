---
title: Homework 7 - Creating a resume database
author: Fig Vishton
date: 11-13-2023
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

In this document is information concerning the database created per the specifications listed in the README. Check there out if you want details!

Additionally, there is a diagram of the database, the people, skills, and roles tables, and queries concerning the database. Additionally, there is a paragraph reflection at the end. Enjoy!

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-figvish>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This project involves the creation of a resume database for a company. This database will feature the collective skills and knowledge of every employee at the company so that holes in the company's set of skills can be identified, and so that the abilities that are present at the company can be flaunted.

## Crows-foot diagram

This is a Crow's foot diagram of the entities in this database and how they are related. 
Each skill can be associated with none or more employees. 
Each employee can have none or more skills. 
Each pairing of skill and employee should include a date the skill was acquired by or awarded to the employee. 
Each role can have one or more employees and each employee can play one or more roles.

```{mermaid}
%%| echo: false
%%| eval: true 
erDiagram
EMPLOYEES }o--o{ SKILLS : date_acquired
EMPLOYEES }|--|{ ROLES : plays

SKILLS {
    int skills_id
    string name
    string description
    string tag
    string url
    int time_commitment
}

EMPLOYEES {
    int people_id
    string last_name
    string date_joined
    string first_name
    string email
    string linkedin_url
    string headshot_url
    string discord_handle
    string brief_bio
}

ROLES {
    int id
    int skills_id
    int people_id
    string date_acquired
}
```


## Examples of data in the database

### People table

The *people* table contains elements that describe the employees at the company. 

The employees table contains an id, the employee's first and last names, the date they joined the company, their email, their linkedin url, their headshot url, their discord handle, and a brief bio. The primary key is the id.

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
#| 

sql = f"""
select * from people;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### Skills table

The *skills* table contains elements that describe the skills and certifications that employees have at the company.

The skills table contains an id, the name of the skill, a description of the skill, a tag, a url to the skill's certification, and an integer time commitment of how time consuming the skill was to achieve. The primary key is the id.

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true

sql = f"""
select * from skills;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### Roles table

The *roles* table contains elements that describe the roles that employees play at the company. 

The roles table contains an id, the name of the role, and a sort priority integer. The primary key is the id.

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true

sql = f"""
select * from roles;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = f"""
select * from people
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name
```{python}
sql = f"""
SELECT 
    people_first_name, 
    people_last_name, 
    people_email
from 
    people
order BY 
    people_last_name
;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### List skill names of Person 1
```{python}
sql = f"""
SELECT
    people_last_name,
    name,
    tag
from
    peopleskills a
    inner join people b on (a.people_id = b.id)
    inner join skills c on (a.skills_id = c.id)
where
    people_last_name = 'Person 1'
order BY
    tag
;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### List people names with Skill 6
```{python}
sql = f"""
SELECT
    tag,
    people_first_name,
    people_last_name
from
    peopleskills a
    inner join skills c on (a.skills_id = c.id)
    inner join people b on (a.people_id = b.id)
where
    tag = 'Skill 6'
order BY
    people_last_name
;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### List people with a DEVELOPER role
```{python}
sql = f"""
SELECT
    name,
    people_first_name,
    people_last_name
from
    peopleroles a
    inner join roles c on (a.role_id = c.id)
    inner join people b on (a.people_id = b.id)
where
    name = 'Developer'
order BY
    people_last_name
;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### List names and email addresses of people without skills
```{python}
sql = f"""
SELECT 
    people_first_name, 
    people_last_name, 
    people_email
from 
    people a
    left join peopleskills b on (a.id = b.people_id)
where 
    b.id IS NULL;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### List names and tags of unused skills
```{python}
sql = f"""
SELECT 
    tag,
    name 
from 
    skills a
    left join peopleskills b on (a.id = b.skills_id)
where 
    b.id IS NULL;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### List people names and skill names with the BOSS role 
```{python}
sql = f"""
SELECT
    c.name,
    b.people_first_name,
    b.people_last_name,
    e.name
from
    peopleroles a
    inner join people b on (a.people_id = b.id)
    inner join roles c on (a.role_id = c.id)
    inner join peopleskills d on (a.people_id = d.people_id)
    inner join skills e on (d.skills_id = e.id)
where
    c.name = 'Boss'
order BY
    people_last_name
;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### List ids and names of unused roles 
```{python}
sql = f"""
SELECT 
    a.name,
    a.id 
from 
    roles a
    left join peopleroles b on (a.id = b.role_id)
where 
    b.role_id IS NULL;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection

Honestly this assignment was a pretty satifying level of difficulty. There were some obstacles but, generally, after trying a few things and thinking about it they were overcome-able. Writing the queries went more smoothly than I had expected which maybe means I am getting a little better at that. I did run into some issues with the qmd file saying my tables did not exist when they did exist but after asking the professor this was figured out. That issue was the only thing that really made me feel like I was hitting my head against a wall. 
